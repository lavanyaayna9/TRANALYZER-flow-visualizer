.\"
.\" This program is free software; you can redistribute it and/or modify
.\" it under the terms of the GNU General Public License as published by
.\" the Free Software Foundation; either version 2, or (at your option)
.\" any later version.
.\"
.\" This program is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public License
.\" along with this program; if not, write to the Free Software Foundation,
.\" Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
.\"

.IX Title tawk 1

.TH TAWK 1 "November 2024" "0.9.3" "User Commands"

.SH NAME
\fBtawk\fR -- awk for Tranalyzer flow files.

.SH SYNOPSIS
\fBtawk\fR [\fIOPTION\fR...] 'AWK_COMMANDS' <\fIFILE\fR>

\fBtawk\fR [\fIOPTION\fR...] \fB-I\fR <\fIFILE\fR> 'AWK_COMMANDS'

.SH DESCRIPTION
\fBtawk\fR allows access to the different columns of \fIFILE\fR through their names.
In addition, it provides a set of functions to facilitate working with Tranalyzer flow files.
Input and output separator are redefined to the tab character (\fI\\t\fR).

.SH INPUT OPTIONS
.TP
\fB-I\fR \fIfile\fR
Alternative way to specify the input file.

.SH OPTIONS
.TP
\fB-N\fR \fInum\fR
Row number where column names are to be found.
.TP
\fB-s\fR \fIchar\fR
First character for the row listing the columns name.
.TP
\fB-F\fR \fIfs\fR
Use \fIfs\fR as input field separator.
.TP
\fB-O\fR \fIfs\fR'
Use \fIc\fR as output field separator.
.TP
\fB--csv\fR
Set input and output separators to comma and extract names from first row.
.TP
\fB--zeek\fR
Configure tawk to work with Bro/Zeek log files.
.TP
\fB-f\fR \fIfile\fR
Read (t)awk program from \fIfile\fR.
.TP
\fB-n\fR
Load nfdump functions.
.TP
\fB-e\fR
Load examples functions.
.TP
\fB-t\fR
Validate column names (slow).
.TP
\fB-r\fR
Try renaming invalid columns (suffix them with underscore) (slow).
.TP
\fB-H\fR
Do not output the header (column names).
.TP
\fB-c\fR
Output command line as a comment.

.SH TRANALYZER SPECIFIC OPTIONS
.TP
\fB-k\fR
Run Wireshark, Termshark or TShark on the extracted data.
.TP
\fB-x\fR \fIoutfile\fR
Create a PCAP file \fIoutfile\fR with the selected flows/packets.
.TP
\fB-X\fR \fIxerfile\fR
Specify the '.xer' file to use with \fB-k\fR and \fB-x\fR options.
.TP
\fB-P\fR
Extract specific packets instead of whole flows.
.TP
\fB-b\fR
Always extract both directions (A and B flows) (\fB-k\fR and \fB-x\fR options).
.TP
\fB-V\fR \fIvname\fR
Display variable \fIvname\fR documentation.
.TP
\fB-L\fR
Decode all variables from Tranalyzer log file.

.SH HELP AND DOCUMENTATION OPTIONS
.TP
\fB-l\fR
List column names and numbers.
.TP
\fB-g\fR
List available functions.
.TP
\fB-d\fR \fIfname\fR
Display function \fIfname\fR documentation.
.TP
\fB-D\fR
Display tawk PDF documentation.
.TP
\fB-h\fR, \fB-?\fR, \fB--help\fR
Display this help and exit.

.SH FUNCTIONS
.TP
\fBabs(\fR\fIv\fR\fB)\fR
Return the absolute value of \fIv\fR.
.TP
\fBaggr(\fR\fIfields\fR[,\fIval\fR[,\fInum\fR]]\fB)\fR
Perform aggregation of \fIfields\fR and store the sum of \fIval\fR.
\fIfields\fR and \fIval\fR can be tab separated lists of fields, e.g., $SrcIP4 "\\t" $DstIP4.
Results are sorted according to the first value of \fIval\fR.
If \fIval\fR is omitted, the empty string or equal to "flows" or "packets" (case insensitive),
count the number of records (flows or packets).
If \fInum\fR is omitted or 0, return the full list.
If \fInum\fR > 0, return the top \fInum\fR results.
If \fInum\fR < 0 return the bottom \fInum\fR results.
.TP
\fBaggrrep(\fR\fIfields\fR[,\fIval\fR[,\fInum\fR[,\fIign_e\fR[,\fIsep\fR]]]]\fB)\fR
Perform aggregation of repetitive values and store the sum of \fIval\fR.
If \fIval\fR is omitted, the empty string or equal to "flows" or "packets" (case insensitive),
count the number of records (flows or packets).
Results are sorted according to the first value of \fIval\fR.
If \fInum\fR is omitted or 0, return the full list.
If \fInum\fR > 0, return the top \fInum\fR results.
If \fInum\fR < 0 return the bottom \fInum\fR results.
If \fIign_e\fR is omitted or 0, consider all values, otherwise ignore empty values.
\fIsep\fR can be used to change the separator character (default: ";").
.TP
\fBah(\fR[\fIp\fR]\fB)\fR
Return true if the protocol is equal to 51 (AH).
.TP
\fBbase64(\fR\fIs\fR\fB)\fR
Encode a string \fIs\fR as base64.
.TP
\fBbase64d(\fR\fIs\fR\fB)\fR
Decode a base64 encoded string \fIs\fR.
.TP
\fBbfeq(\fR\fIval1\fR,\fIval2\fR\fB)\fR
Return true if the bitfields (hexadecimal numbers) \fIval1\fR and \fIval2\fR are equal.
.TP
\fBbitsallset(\fR\fIval\fR,\fImask\fR\fB)\fR
Return true if all the bits set in \fImask\fR are also set in \fIval\fR..
.TP
\fBbitsanyset(\fR\fIval\fR,\fImask\fR\fB)\fR
Return true if one of the bits set in \fImask\fR is also set in \fIval\fR.
.TP
\fBbitshift(\fR\fIn\fR[,\fIt\fR[,\fId\fR[,\fIb\fR]]]\fB)\fR
Shift a byte or of a list of bytes \fIn\fR to the left or right by a given number of bits \fIt\fR.
To shift to the left, set \fId\fR to 0 (default), to shift to the right set \fId\fR != 0.\\
Set \fIb\fR to \fI16\fR to force interpretation as hexadecimal, e.g.,
interpret 45 as 69 (0x45) instead of 45.
.TP
\fBchomp(\fR\fIs\fR\fB)\fR
Remove leading and trailing spaces from a string.
.TP
\fBCOL\fR
Provide access to column names through their indexes and to column indexes
through their names.
.TP
\fBcontains(\fR\fIval\fR,\fItxt\fR\fB)\fR
Return true if \fIval\fR contains the substring \fItxt\fR.
.TP
\fBcvalcontains(\fR\fIval\fR,\fIitem\fR\fB)\fR
Alias for \fBvalcontains(\fR\fIval\fR, "\_", \fIitem\fR)\fR.
.TP
\fBdether(\fR[\fImac\fR]\fB)\fR
Return true if one of the destination MAC addresses is equal to \fImac\fR.
If \fImac\fR is omitted, return the destination MAC address(es).
.TP
\fBdhcp()\fR
Return true if the flow contains DHCP traffic.
.TP
\fBdhost(\fR[\fIip\fR|\fInet\fR]\fB)\fR
Return true if the destination IP is equal to \fIip\fR or belongs to \fInet\fR.
If \fIip\fR is omitted, return the destination IP.
.TP
\fBdiff(\fR\fIfile\fR[,\fImode\fR]\fB)\fR
Compare \fIfile\fR and the input and print the name of the columns which differ.
\fImode\fR controls the format of the output.
.TP
\fBdmac(\fR[\fImac\fR]\fB)\fR
Return true if one of the destination MAC addresses is equal to \fImac\fR.
If \fImac\fR is omitted, return the destination MAC address(es).
.TP
\fBdnet(\fR[\fIip\fR|\fInet\fR]\fB)\fR
Alias for \fBdhost(\fR[\fIip\fR|\fInet\fR]\fB)\fR.
.TP
\fBdns()\fR
Return true if the flow contains DNS traffic.
.TP
\fBdport(\fR[\fIp\fR]\fB)\fR
Return true if the destination port appears in \fIp\fR (comma or semicolon separated).
Ranges may also be specified using a dash, e.g., \fBdport("1-3")\fR.
If \fIp\fR is omitted, return the destination port.
.TP
\fBesp(\fR[\fIp\fR]\fB)\fR
Return true if the protocol is equal to 50 (ESP).
.TP
\fBether(\fR[\fImac\fR]\fB)\fR
Return true if one of the source or destination MAC addresses is equal to \fImac\fR.
If \fImac\fR is omitted, return the source and destination MAC address(es).
.TP
\fBflow(\fR\fIf\fR\fB)\fR
Return all flows whose index appears in \fIf\fR (comma or semicolon separated).
Ranges may also be specified using a dash, e.g., \fBflow("1-3")\fR.
If \fIf\fR is omitted, return the flow index.
\fIf\fR
.TP
\fBfollow_stream(\fR\fIf\fR[,\fIof\fR[,\fId\fR[,\fIpf\fR[,\fIr\fR[,\fInc\fR]]]]]\fB)\fR
Return the payload of the flow with index \fIf\fR.
.IP
\fIof\fR can be used to change the output format:
.EX
.RS
.RS
0: Payload only [default],
1: prefix each payload with packet/flow info,
2: JSON,
3: Reconstruct (pipe the output to 'xxd -p -r' to reproduce the binary file).
.RE
.EE
.EX
\fId\fR can be used to only extract a specific direction (\fI"A"\fR or \fI"B"\fR) [default: \fI""\fR (A and B)].
.EE
\fIpf\fR can be used to change the payload format [default: 0]:
.EX
.RS
0: ASCII,
1: Hexdump,
2: Raw/Binary,
3: Base64.
.RE
.EE
.EX
\fIr\fR can be used to prevent the analysis of TCP sequence numbers (no TCP reassembly and reordering).
.EE
\fInc\fR can be used to print the data without colors.
.RE
.TP
\fBffsplit(\fR[\fIs\fR]\fB)\fR
Split the input file into smaller more manageable files.
The files to create can be specified as argument \fIs\fR to the function (one
comma separated string). If no argument is specified, create one file per
column whose name ends with 'Stat', e.g., dnsStat, and one for
pwxType (pw) and covertChannels (cc).
If \fIk\fR > 0, then only print relevant fields and those controlled by \fIh\fR,
a comma separated list of fields to keep in each file, e.g., "srcIP,dstIP".
.TP
\fBgre(\fR[\fIp\fR]\fB)\fR
Return true if the protocol is equal to 47 (GRE).
.TP
\fBhasprefix(\fR\fIval\fR,\fIpre\fR\fB)\fR
Return true if \fIval\fR begins with the prefix \fIpre\fR.
.TP
\fBhassuffix(\fR\fIval\fR,\fIsuf\fR\fB)\fR
Return true if \fIval\fR finishes with the suffix \fIsuf\fR.
.TP
\fBhdr()\fR
Use this function in your tests to keep the header (column names).
.TP
\fBhost(\fR[\fIip\fR|\fInet\fR]\fB)\fR
Return true if the source or destination IP is equal to \fIip\fR or belongs to \fInet\fR.
If \fIip\fR is omitted, return the source and destination IP.
.TP
\fBhrnum(\fR\fInum\fR[,\fImode\fR[,\fIsuffix\fR]]\fB)\fR
Convert a number to its human readable form, e.g., 2000 -> 2K.
.TP
\fBhttp()\fR
Return true if the flow contains HTTP traffic.
.TP
\fBicmp(\fR[\fIp\fR]\fB)\fR
Return true if the protocol is equal to 1 (ICMP).
.TP
\fBicmp6(\fR[\fIp\fR]\fB)\fR
Return true if the protocol is equal to 58 (ICMPv6).
.TP
\fBigmp(\fR[\fIp\fR]\fB)\fR
Return true if the protocol is equal to 2 (IGMP).
.TP
\fBip()\fR
Return true if the flow contains IPv4 or IPv6 traffic.
.TP
\fBip2hex(\fR\fIip\fR\fB)\fR
Convert an IPv4 address to hex.
.TP
\fBip2mask(\fR\fIip\fR\fB)\fR
Convert an IP address \fIip\fR to a network mask.
.TP
\fBip2num(\fR\fIip\fR\fB)\fR
Convert an IP address to a number.
.TP
\fBip2str(\fR\fIip\fR\fB)\fR
Convert an IPv4 address to string.
.TP
\fBip62str(\fR\fIip\fR\fB)\fR
Convert an IPv6 address to string.
.TP
\fBip6compress(\fR\fIip\fR\fB)\fR
Compress an IPv6 address.
.TP
\fBip6expand(\fR\fIip\fR[,\fItrim\fR]\fB)\fR
Expand an IPv6 address.
If \fItrim\fR is different from 0, remove leading zeros.
.TP
\fBipinnet(\fR\fIip\fR,\fInet\fR[,\fImask\fR]\fB)\fR
Test whether an IP address belongs to a given network.
.TP
\fBipinrange(\fR\fIip\fR,\fIlow\fR,\fIhigh\fR\fB)\fR
Test whether an IP address lies between two addresses.
.TP
\fBipv4()\fR
Return true if the flow contains IPv4 traffic.
.TP
\fBipv6()\fR
Return true if the flow contains IPv6 traffic.
.TP
\fBisfloat(\fR\fIv\fR\fB)\fR
Return true if \fIv\fR is a floating point number.
.TP
\fBisint(\fR\fIv\fR\fB)\fR
Return true if \fIv\fR is an integer.
.TP
\fBisip(\fR\fIv\fR\fB)\fR
Return true if \fIv\fR is an IPv4 address in hexadecimal, numerical or dotted decimal notation.
.TP
\fBisip6(\fR\fIv\fR\fB)\fR
Return true if \fIv\fR is an IPv6 address.
.TP
\fBisiphex(\fR\fIv\fR\fB)\fR
Return true if \fIv\fR is an IPv4 address in hexadecimal notation.
.TP
\fBisipnum(\fR\fIv\fR\fB)\fR
Return true if \fIv\fR is an IPv4 address in numerical (int) notation.
.TP
\fBisipstr(\fR\fIv\fR\fB)\fR
Return true if \fIv\fR is an IPv4 address in dotted decimal notation.
.TP
\fBisnum(\fR\fIv\fR\fB)\fR
Return true if \fIv\fR is a number (signed, unsigned or floating point).
.TP
\fBisuint(\fR\fIv\fR\fB)\fR
Return true if \fIv\fR is an unsigned integer.
.TP
\fBjoin(\fR\fIarr\fR,\fIsep\fR\fB)\fR
Convert an array to string, separating each value with \fIsep\fR.
.TP
\fBjson(\fR[\fIs\fR]\fB)\fR
Convert the string \fIs\fR to JSON.
The first record is used as column names.
If \fIs\fR is omitted, convert the entire row ($0).
.TP
\fBlocaltime(\fR\fIt\fR\fB)\fR
Convert UNIX timestamp to string (localtime).
.TP
\fBloopback(\fR\fIip\fR\fB)\fR
Return true if \fIip\fR is a loopback address.
.TP
\fBlstrip(\fR\fIs\fR\fB)\fR
Remove leading spaces from a string.
.TP
\fBmac(\fR[\fImac\fR]\fB)\fR
Return true if one of the source or destination MAC addresses is equal to \fImac\fR.
If \fImac\fR is omitted, return the source and destination MAC address(es).
.TP
\fBmask2ip(\fR\fIm\fR\fB)\fR
Convert a network mask \fIm\fR (int) to an IPv4 address (int).
.TP
\fBmask2ipstr(\fR\fIm\fR\fB)\fR
Convert a network mask \fIm\fR (int) to an IPv4 address (string).
.TP
\fBmask2ip6(\fR\fIm\fR\fB)\fR
Convert a network mask \fIm\fR (int) to an IPv6 address (int).
.TP
\fBmask2ip6str(\fR\fIm\fR\fB)\fR
Convert a network mask \fIm\fR (int) to an IPv6 address (string).
.TP
\fBmax(\fR\fIc\fR\fB)\fR
Keep track of the max value of a column \fIc\fR.
The result can be accessed with \fBget_max(\fR\fIc\fR\fB)\fR or printed with \fBprint_max(\fR[\fIc\fR]\fB)\fR.
.TP
\fBmax2(\fR\fIa\fR,\fIb\fR\fB)\fR
Return the maximum value between \fIa\fR and \fIb\fR.
.TP
\fBmax3(\fR\fIa\fR,\fIb\fR,\fIc\fR\fB)\fR
Return the maximum value between \fIa\fR, \fIb\fR and \fIc\fR.
.TP
\fBmcast(\fR\fIip\fR\fB)\fR
Return true if \fIip\fR is a multicast address.
.TP
\fBmean(\fR\fIc\fR\fB)\fR
Compute the mean value of a column \fIc\fR.
The result can be accessed with \fBget_mean(\fR\fIc\fR\fB)\fR or printed with \fBprint_mean(\fR[\fIc\fR]\fB)\fR.
.TP
\fBmin(\fR\fIc\fR\fB)\fR
Keep track of the min value of a column \fIc\fR.
The result can be accessed with \fBget_min(\fR\fIc\fR\fB)\fR or printed with \fBprint_min(\fR[\fIc\fR]\fB)\fR.
.TP
\fBmin2(\fR\fIa\fR,\fIb\fR\fB)\fR
Return the minimum value between \fIa\fR and \fIb\fR.
.TP
\fBmin3(\fR\fIa\fR,\fIb\fR,\fIc\fR\fB)\fR
Return the minimum value between \fIa\fR, \fIb\fR and \fIc\fR.
.TP
\fBnibble_swap(\fR\fIn\fR[,\fIb\fR]\fB)\fR
Swap the nibbles of a byte or of a list of bytes \fIn\fR.
Set \fIb\fR to \fI16\fR to force interpretation as hexadecimal, e.g.,
interpret 45 as 69 (0x45) instead of 45.
.TP
\fBnet(\fR[\fIip\fR|\fInet\fR]\fB)\fR
Alias for \fBhost(\fR[\fIip\fR|\fInet\fR]\fB)\fR.
.TP
\fBnot(\fR\fIq\fR\fB)\fR
Return the logical negation of a query \fIq\fR.
This function can be used to keep the header when negating a query.
.TP
\fBpacket(\fR\fIp\fR\fB)\fR
Return all packets whose index appears in \fIp\fR (comma or semicolon separated).
Ranges may also be specified using a dash, e.g., \fBpacket("1-3")\fR.
If \fIp\fR is omitted, return the packet number.
.TP
\fBport(\fR[\fIp\fR]\fB)\fR
Return true if the source or destination port appears in \fIp\fR (comma or semicolon separated).
Ranges may also be specified using a dash, e.g., \fBport("1-3")\fR.
If \fIp\fR is omitted, return the source and destination port.
.TP
\fBprinterr(\fR\fIs\fR\fB)\fR
Print the string \fIs\fR in red with an added newline.
.TP
\fBprivip(\fR\fIip\fR\fB)\fR
Return true if \fIip\fR is a private IP.
.TP
\fBproto(\fR[\fIp\fR]\fB)\fR
Return true if the protocol number appears in \fIp\fR (comma or semicolon separated).
Ranges may also be specified using a dash, e.g., \fBproto("1-3")\fR.
If \fIp\fR is omitted, return the protocol number.
.TP
\fBproto2str(\fR\fIp\fR\fB)\fR
Return the string representation of the protocol number \fIp\fR.
.TP
\fBrstrip(\fR\fIs\fR\fB)\fR
Remove trailing spaces from a string.
.TP
\fBrsvp(\fR[\fIp\fR]\fB)\fR
Return true if the protocol is equal to 46 (RSVP).
.TP
\fBrvalcontains(\fR\fIval\fR,\fIitem\fR\fB)\fR
Alias for \fBvalcontains(\fR\fIval\fR, ";", \fIitem\fR)\fR.
.TP
\fBsctp(\fR[\fIp\fR]\fB)\fR
Return true if the protocol is equal to 132 (SCTP).
.TP
\fBsether(\fR[\fImac\fR]\fB)\fR
Return true if one of the source MAC addresses is equal to \fImac\fR.
If \fImac\fR is omitted, return the source MAC address(es).
.TP
\fBshark(\fR\fIq\fR\fB)\fR
Query flows files according to Wireshark's syntax.
.TP
\fBshost(\fR[\fIip\fR|\fInet\fR]\fB)\fR
Return true if the source IP is equal to \fIip\fR or belongs to \fInet\fR.
If \fIip\fR is omitted, return the source IP.
.TP
\fBsmac(\fR[\fImac\fR]\fB)\fR
Return true if one of the source MAC addresses is equal to \fImac\fR.
If \fImac\fR is omitted, return the source MAC address(es).
.TP
\fBsnet(\fR[\fIip\fR|\fInet\fR]\fB)\fR
Alias for \fBshost(\fR[\fIip\fR|\fInet\fR]\fB)\fR.
.TP
\fBsplitc(\fR\fIval\fR[,\fInum\fR[,\fIosep\fR]]\fB)\fR
Split compound values.
Alias for \fBt2split(\fR\fIval\fR, "\_", \fInum\fR, \fIosep\fR\fB)\fR.
.TP
\fBsplitr(\fR\fIval\fR[,\fInum\fR[,\fIosep\fR]]\fB)\fR
Split repetitive values.
Alias for \fBt2split(\fR\fIval\fR, ";", \fInum\fR, \fIosep\fR\fB)\fR.
.TP
\fBsport(\fR[\fIp\fR]\fB)\fR
Return true if the source port appears in \fIp\fR (comma or semicolon separated).
Ranges may also be specified using a dash, e.g., \fBsport("1-3")\fR.
If \fIp\fR is omitted, return the source port.
.TP
\fBstreq(\fR\fIval1\fR,\fIval2\fR\fB)\fR
Return true if \fIval1\fR is equal to \fIval2\fR.
.TP
\fBstrip(\fR\fIs\fR\fB)\fR
Remove leading and trailing spaces from a string.
.TP
\fBstrisempty(\fR\fIval\fR\fB)\fR
Return true if \fIval\fR is an empty string.
.TP
\fBstrneq(\fR\fIval1\fR,\fIval2\fR\fB)\fR
Return true if \fIval1\fR and \fIval2\fR are not equal.
.TP
\fBt2rsort(\fR\fIcol\fR[,\fInum\fR[,\fItype\fR]]\fB)\fR
Sort the file in reverse order according to \fIcol\fR.
(Multiple column numbers can be specified by using \fI;\fR as separator, e.g., \fI1 ";" 2\fR.
If \fInum\fR is omitted or 0, return the full list.
If \fInum\fR > 0, return the top \fInum\fR results.
If \fInum\fR < 0 return the bottom \fInum\fR results.
\fItype\fR can be used to specify the type of data to sort:
"ip", "num" or "str" (default is based on the first matching record).
.TP
\fBt2sort(\fR\fIcol\fR[,\fInum\fR[,\fItype\fR]]\fB)\fR
Sort the file according to \fIcol\fR.
(Multiple column numbers can be specified by using \fI;\fR as separator, e.g., \fI1 ";" 2\fR.
If \fInum\fR is omitted or 0, return the full list.
If \fInum\fR > 0, return the top \fInum\fR results.
If \fInum\fR < 0 return the bottom \fInum\fR results.
\fItype\fR can be used to specify the type of data to sort:
"ip", "num" or "str" (default is based on the first matching record).
If \fIrev\fR > 0, sort in reverse order (alternatively, use the \fBt2rsort()\fR function).
.TP
\fBt2split(\fR\fIval\fR,\fIsep\fR[,\fInum\fR[,\fIosep\fR]]\fB)\fR
Split values according to \fIsep\fR.
If \fInum\fR is omitted or 0, \fIval\fR is split into \fIosep\fR separated columns.
If \fInum\fR > 0, return the \fInum\fR repetition.
If \fInum\fR < 0, return the \fInum\fR repetition from the end.
Multiple \fInum\fR can be specified, e.g., \fI"1;-1;2"\fR.
Output separator \fIosep\fR defaults to OFS.
.TP
\fBt2whois(\fR\fIip\fR[,\fIo_opt\fR]\fB)\fR
Wrapper to call \fBt2whois\fR from \fBtawk\fR.
\fIip\fR must be a valid IPv4 or IPv6 address.
\fIo_opt\fR is passed verbatim to \fBt2whois -o\fR option
(run \fBt2whois -L\fR for more details).
.TP
\fBtcp(\fR[\fIp\fR]\fB)\fR
Return true if the protocol is equal to 6 (TCP).
.TP
\fBtcpflags(\fR[\fIval\fR]\fB)\fR
If \fIval\fR is specified, return true if the specified flags are set.
If \fIval\fR is omitted, return a string representation of the TCP flags.
.TP
\fBtexscape(\fR\fIs\fR\fB)\fR
Escape the string \fIs\fR to make it LaTeX compatible.
.TP
\fBtimestamp(\fR\fIt\fR\fB)\fR
Convert date \fIt\fR to UNIX timestamp.
.TP
\fBtobits(\fR\fIu\fR[,\fIb\fR]\fB)\fR
Convert the unsigned integer \fIu\fR to its binary representation.
Set \fIb\fR to \fI16\fR to force interpretation as hexadecimal, e.g.,
interpret 45 as 69 (0x45) instead of 45.
.TP
\fBtuple2()\fR
Return the 2 tuple (source IP and destination IP).
.TP
\fBtuple3()\fR
Return the 3 tuple (source IP, destination IP and port).
.TP
\fBtuple4()\fR
Return the 4 tuple (source IP and port, destination IP and port).
.TP
\fBtuple5()\fR
Return the 5 tuple (source IP and port, destination IP and port, protocol).
.TP
\fBtuple6()\fR
Return the 6 tuple (source IP and port, destination IP and port, protocol, VLAN ID).
.TP
\fBudp(\fR[\fIp\fR]\fB)\fR
Return true if the protocol is equal to 17 (UDP).
.TP
\fBunquote(\fR\fIs\fR\fB)\fR
Remove leading and trailing quotes from a string \fIs\fR.
.TP
\fBurldecode(\fR\fIurl\fR\fB)\fR
Decode an encoded URL \fIurl\fR.
.TP
\fButc(\fR\fIt\fR\fB)\fR
Convert UNIX timestamp to string (UTC).
.TP
\fBvalcontains(\fR\fIval\fR,\fIsep\fR,\fIitem\fR\fB)\fR
Return true if one item of \fIval\fR split by \fIsep\fR is equal to \fIitem\fR.
.TP
\fB_validate_col(\fR\fInames\fR[,\fIextname\fR]\fB)\fR
Test whether a column exists (its number is different from 0).
Multiple names can be provided in a semi-colon separated string.
Return the index of the first column with a non-zero index.
If none of the column was found, exit and print the column names.
\fIextname\fR, a column number can be provided and will be returned if none of the column names listed was found.
.TP
\fBwildcard(\fR\fIexpr\fR\fB)\fR
Print all columns whose name matches the regular expression \fIexpr\fR.
If \fIexpr\fR is preceded by an exclamation mark, return all columns whose name does NOT match \fIexpr\fR.

.SH EXAMPLES
.TP
\fBcovertChans(\fR[\fIval\fR[,\fInum\fR]]\fB)\fR
Returns information about hosts involved in covert channels and aggregate \fIval\fR.
If \fIval\fR is omitted or equal to "flows", counts the number of flows.
If \fInum\fR is omitted or 0, returns the full list.
If \fInum\fR > 0, returns the top \fInum\fR results.
If \fInum\fR < 0 returns the bottom \fInum\fR results.
.TP
\fBdnsZT()\fR
Return all flows where a DNS zone transfer was performed.
.TP
\fBexeDL(\fR[\fIn\fR]\fB)\fR
Return the top \fIn\fR EXE downloads.
.TP
\fBhttpHostsURL(\fR[\fIf\fR]\fB)\fR
Return all HTTP hosts and a list of the files hosted (sorted alphabetically).
If \fIf\fR > 0, print the number of times a URL was requested.
.TP
\fBnonstdports()\fR
Return all flows running protocols over non-standard ports.
.TP
\fBpassivedns()\fR
Extract all DNS server replies from a flow file.
The following information is reported for each reply:
FirstSeen, LastSeen, Type (A or AAAA), TTL, Query, Answer, Organization, Country, AS number.
.TP
\fBpasswords(\fR[\fIval\fR[,\fInum\fR]]\fB)\fR
Return information about hosts sending authentication in clear text and aggregate \fIval\fR.
If \fIval\fR is omitted or equal to "flows", count the number of flows.
If \fInum\fR is omitted or 0, return the full list.
If \fInum\fR > 0, return the top \fInum\fR results.
If \fInum\fR < 0 return the bottom \fInum\fR results.
.TP
\fBpostQryStr(\fR[\fIn\fR]\fB)\fR
Return the top \fIn\fRPOST requests with query strings.
.TP
\fBssh()\fR
Return the SSH connections.
.TP
\fBtopDnsA(\fR[\fIn\fR]\fB)\fR
Return the top \fIn\fR DNS answers.
.TP
\fBtopDnsIp4(\fR[\fIn\fR]\fB)\fR
Return the top \fIn\fR DNS answers IPv4 addresses.
.TP
\fBtopDnsIp6(\fR[\fIn\fR]\fB)\fR
Return the top \fIn\fR DNS answers IPv6 addresses.
.TP
\fBtopDnsQ(\fR[\fIn\fR]\fB)\fR
Return the top \fIn\fR DNS queries.
.TP
\fBtopHttpMimesST(\fR[\fIn\fR]\fB)\fR
Return the top \fIn\fR HTTP content-type (type/subtype).
.TP
\fBtopHttpMimesT(\fR[\fIn\fR]\fB)\fR
Return the top \fIn\fR HTTP content-type (type only).
.TP
\fBtopSLD(\fR[\fIn\fR]\fB)\fR
Return the top \fIn\fR second-level domains queried (google.com, yahoo.com, ...).
.TP
\fBtopTLD(\fR[\fIn\fR]\fB)\fR
Return the top \fIn\fR top-level domains (TLD) queried (.com, .net, ...).

.SH FILES
\fIfuncs/funcs.load\fR
.RS
Set of predefined functions for \fBtawk\fR.

.SH ""
\fIt2nfdump/t2nfdump.load\fR
.RS
Set of predefined functions for \fBtawk\fR (loaded with \fB-n\fR option).

.SH ""
\fIexamples/examples.load\fR
.RS
Set of predefined functions for \fBtawk\fR (loaded with \fB-e\fR option).

.SH ""
\fIt2custom.load\fR
.RS
Set of user defined functions for \fBtawk\fR.

.SH EXIT STATUS
\fBtawk\fR returns 0 on success. Any different value is an indication of error.

.SH AUTHORS
\fBtawk\fR was written by the Tranalyzer Development Team.

.SH BUGS
Please send problems, bugs, questions and suggestions to:

.ti +24
\fIandy@tranalyzer.com\fR

.SH DISTRIBUTION
The latest version of \fBtawk\fR can be found at

.ti +22
\fIhttps://tranalyzer.com\fR

.SH SEE ALSO
\fIt2nfdump\fR(1), \fIt2conf\fR(1), \fIt2fm\fR(1), \fItranalyzer\fR(1), \fIgawk\fR(1)

The full documentation for \fBtawk\fR is available at

.ti +6
\fIhttps://tranalyzer.com/download/doc/tawk.pdf\fR
