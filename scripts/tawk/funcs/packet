#!/usr/bin/env awk
#
# Return all packets whose number appears in 'p' (int or hex).
# If 'p' is omitted, return the packet number.
#
# Parameters:
#   - [p]: the packet number(s) to test (comma or semicolon separated)
#          (ranges may also be specified using a dash (see examples below))
#
# Dependencies:
#   - basicFlow
#
# See also:
#   - flow
#
# Examples:
#   - tawk 'packet(123)' file.txt          # test for packet 123
#   - tawk 'packet("123,456")' file.txt    # test for packet 123 or 456
#   - tawk 'packet("123;456")' file.txt    # test for packet 123 or 456
#   - tawk 'packet("123-456")' file.txt    # test for packet 123, 124, ... or 456
#   - tawk 'packet("1-3;5;7-9")' file.txt  # test for packet 1 to 3, 5, or 7 to 9
#   - tawk '{ print packet() }' file.txt   # print the packet number

@include "hdr"
@include "_validate_col"

function packet(p,        _c, _i, _l, _pkts, _rng) {
    _c = _validate_col("pktNo", _my_pktNo)
    if (!p || (__PRIHDR__ && hdr())) return $_c
    _c = strtonum($_c)
    if (isnum(p)) return (_c == p)
    _l = split(p, _pkts, /[,;]/)
    for (_i = 1; _i <= _l; _i++) {
        if (match(_pkts[_i], /^(0x[[:xdigit:]]+|[0-9]+)-(0x[[:xdigit:]]+|[0-9]+)$/, _rng)) { # range
            if (_c >= strtonum(_rng[1]) && _c <= strtonum(_rng[2])) {
                return 1
            }
        } else if (_c == _pkts[_i]) {
            return 1
        }
    }
    return 0
}
