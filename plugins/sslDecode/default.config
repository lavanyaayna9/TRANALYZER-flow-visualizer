# [!!! -------------------------------------------------------------------- !!!]
# [!!! ---------------------- DO NOT EDIT THIS FILE ----------------------- !!!]
# [!!! -------------------------------------------------------------------- !!!]
#
# This is the default configuration for sslDecode
#
# Apply the configuration as follows:
#     - t2conf sslDecode --reset
#
# If you want to customize the default configuration, proceed as follows:
#     1. Create 'sslDecode.config':
#           t2conf sslDecode -g
#     2. Edit 'sslDecode.config'
#     3. Apply 'sslDecode.config':
#           t2conf sslDecode -C sslDecode.config
#
# [Format of the file]
#     - Empty lines and lines starting with '%' or '#'â€™ are ignored.
#     - One section starting with '# :name: pluginName" per file.
#     - If no section starting with '# :file: path/to/file.h" is specified,
#       it is assumed the file is src/pluginName.h (relative to plugin folder)
#         - If a configuration element applies to a different file, a file
#           section MUST be used
#         - Filenames are relative to plugin folder, i.e., sslDecode,
#           e.g., src/sslDecode.h
#     - A line is composed of the name of a macro (define) in the header file
#       followed by an equal sign and the value to set for the define:
#           NAME = value
#       where value can be anything, including yes (= 1) and no (= 0)
#     - Add a comment before each setting to describe the configuration option
#       and its valid values:
#           # Description of the option [yes / no]
#       or
#           # Description of the option [0 - 255]
#       or
#           # Description of the option:
#           #   0: description of value 0
#           #   1: description of value 1
#           #   2: description of value 2

# ---------------------------------------------------------------------------- #
# :name: sslDecode                                                             #
# ---------------------------------------------------------------------------- #

# Analyze OpenVPN (Experimental) [yes / no]
SSL_ANALYZE_OVPN = no

# Analyze TLS 1.3 client/server hello in decrypted QUIC initial packets [yes / no]
SSL_ANALYZE_QUIC = no

# Output the list and number of record versions [yes / no]
SSL_REC_VER = yes

# Maximum number of record versions to store [0 - 255]
# (require SSL_REC_VER = yes)
SSL_MAX_REC_VER = 3

# Output the list and number of handshake versions [yes / no]
SSL_HAND_VER = yes

# Maximum number of handshake versions to store [0 - 255]
# (require SSL_HAND_VER = yes)
SSL_MAX_HAND_VER = 2

# Output the list and number of extensions [yes / no]
SSL_EXT_LIST = yes

# Maximum number of extensions to store [0 - 255]
# (require SSL_EXT_LIST = yes)
SSL_MAX_EXT = 20

# Output the list and number of supported versions [yes / no]
SSL_SUPP_VER = yes

# Maximum number of supported versions to store [0 - 255]
# (require SSL_SUPP_VER = yes)
SSL_MAX_SUPP_VER = 4

# Output the list and number of signature hash algorithms [yes / no]
SSL_SIG_ALG = yes

# Maximum number of signature hash algorithms to store [0 - 255]
# (require SSL_SIG_ALG = yes)
SSL_MAX_SIG_ALG = 15

# Output the list and number of Elliptic Curve [yes / no]
SSL_EC = yes

# Maximum number of EC to store [0 - 255]
# (require SSL_EC = yes)
SSL_MAX_EC = 6

# Output the list and number of Elliptic Curve point formats [yes / no]
SSL_EC_FORMATS = yes

# Maximum number of EC formats to store [0 - 255]
# (require SSL_EC_FORMATS = yes)
SSL_MAX_EC_FORMATS = 6

# Output the list and number of protocols (ALPN) [yes / no]
SSL_ALPN_LIST = yes

# Output the list and number of protocols (ALPS) [yes / no]
SSL_ALPS_LIST = yes

# Output the list and number of protocols (NPN) [yes / no]
SSL_NPN_LIST = yes

# Maximum number of protocols (ALPN/ALPS/NPN) to store [0 - 255]
# (require SSL_ALPN_LIST = yes or SSL_ALPS_LIST = yes or SSL_NPN_LIST = yes)
SSL_MAX_PROTO = 6

# Maximum number of characters per protocol (ALPN/ALPS/NPN) [0 - 255]
# (require SSL_ALPN_LIST = yes or SSL_ALPS_LIST = yes or SSL_NPN_LIST = yes)
SSL_PROTO_LEN = 16

# Output the list and number of supported ciphers [yes / no]
SSL_CIPHER_LIST = yes

# Maximum number of ciphers to store [0 - 255]
# (require SSL_CIPHER_LIST = yes)
SSL_MAX_CIPHER = 30

# Analyze certificates [yes / no]
SSL_ANALYZE_CERT = yes

# ---------------------------------------------------------------------------- #
# The rest of this file only apply if SSL_ANALYZE_CERT = yes                   #
# ---------------------------------------------------------------------------- #

# Print the certificate serial number [yes / no]
SSL_CERT_SERIAL = yes

# Output certificates fingerprints:
#   0: no certificate fingerprint,
#   1: SHA1,
#   2: MD5
SSL_CERT_FINGPRINT = 1

# Print the certificate validity (Valid from/to) [yes / no]
SSL_CERT_VALIDITY = yes

# Print the certificate signature algorithm [yes / no]
SSL_CERT_SIG_ALG = yes

# Print the certificate public key algorithm [yes / no]
SSL_CERT_PUBKEY_ALG = yes

# Name to use for algorithms:
#   0: short
#   1: long
SSL_CERT_ALG_NAME_LONG = 0

# Print the certificate public key type and size [yes / no]
SSL_CERT_PUBKEY_TS = yes

# Certificate subject information:
#   0: no information about the certificate subject,
#   1: print the whole subject as one string,
#   2: print selected fields only
SSL_CERT_SUBJECT = 2

# Certificate issuer information:
#   0: no information about the certificate issuer,
#   1: print the whole issuer as one string,
#   2: print selected fields only
SSL_CERT_ISSUER = 2

# Print the common name of the issuer/subject [yes / no]
# (require SSL_CERT_SUBJECT = 2 or SSL_CERT_ISSUER = 2
SSL_CERT_COMMON_NAME = yes

# Print the organization name of the issuer/subject [yes / no]
# (require SSL_CERT_SUBJECT = 2 or SSL_CERT_ISSUER = 2
SSL_CERT_ORGANIZATION = yes

# Print the organizational unit name of the issuer/subject [yes / no]
# (require SSL_CERT_SUBJECT = 2 or SSL_CERT_ISSUER = 2
SSL_CERT_ORG_UNIT = yes

# Print the locality name of the issuer/subject [yes / no]
# (require SSL_CERT_SUBJECT = 2 or SSL_CERT_ISSUER = 2
SSL_CERT_LOCALITY = yes

# Print the state or province of the issuer/subject [yes / no]
# (require SSL_CERT_SUBJECT = 2 or SSL_CERT_ISSUER = 2
SSL_CERT_STATE = yes

# Print the country of the issuer/subject [yes / no]
# (require SSL_CERT_SUBJECT = 2 or SSL_CERT_ISSUER = 2
SSL_CERT_COUNTRY = yes

# Print if TLS connection is likely a Tor one [yes / no]
SSL_DETECT_TOR = no

# Remove SSL_CERT_PATH before starting [yes / no]
SSL_RM_CERTDIR = yes

# Save certificates [yes / no]
SSL_SAVE_CERT = no

# Prepend the flowIndex to the certificate name [yes / no]
SSL_CERT_NAME_FINDEX = no

# Search for blacklisted certificates [yes / no]
# (require SSL_SAVE_CERT = yes or SSL_CERT_FINGPRINT = yes)
SSL_BLIST = no

# Max length for blacklist descriptions [1 - UINT16_MAX]
# (require SSL_SAVE_CERT = yes or SSL_CERT_FINGPRINT = yes)
SSL_BLIST_LEN = 41

# Output JA4/JA4S fingerprints [yes / no]
SSL_JA4 = yes

# Output JA4/JA4S_o fingerprints (original order) [yes / no]
SSL_JA4_O = no

# Output JA4/JA4S_r fingerprints (raw) [yes / no]
SSL_JA4_R = no

# Output JA4/JA4S_ro fingerprints (raw, original order) [yes / no]
SSL_JA4_RO = no

# Max length for uncompressed JA4/JA4S signatures (JA4/JA4S_r, JA4/JA4S_ro) [1 - UINT16_MAX]
SSL_JA4_STR_LEN = 254

# Max length for JA4/JA4S descriptions [1 - UINT16_MAX]
# (require SSL_JA4 = yes)
SSL_JA4_DLEN = 64

# Output JA3 fingerprint (hash and description) [yes / no]
# (require SSL_SAVE_CERT = yes or SSL_CERT_FINGPRINT = yes)
SSL_JA3 = yes

# Also output JA3 fingerprint before hashing [yes / no]
# (require SSL_SAVE_CERT = yes or SSL_CERT_FINGPRINT = yes)
SSL_JA3_STR = no

# Max length for JA3 descriptions [1 - UINT16_MAX]
# (require SSL_SAVE_CERT = yes or SSL_CERT_FINGPRINT = yes)
SSL_JA3_DLEN = 64

# Max length for uncompressed JA3 signatures (ja3_str) [1 - UINT16_MAX]
# (require SSL_SAVE_CERT = yes or SSL_CERT_FINGPRINT = yes)
SSL_JA3_STR_LEN = 1024

# Folder for saved certificates
SSL_CERT_PATH = "/tmp/TranCerts/"

# Extension for saved certificates
SSL_CERT_EXT = ".pem"
